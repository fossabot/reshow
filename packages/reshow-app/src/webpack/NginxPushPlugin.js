import path from "path";

const keys = Object.keys;

class NginxPushPlugin {
  constructor(options, assetsStore) {
    // Default options
    this.options = {
      filename: "push.nginx.conf",
      nginxLocation: null,
      ...options,
    };
    this.assetsStore = assetsStore;
  }

  // Define `apply` as its prototype method which is supplied with compiler as its argument
  apply(compiler) {
    // convert absolute filename into relative so that webpack can
    // generate it at correct location
    const { filename } = this.options;

    if (path.resolve(filename) === path.normalize(filename)) {
      this.options.filename = path.relative(
        compiler.options.output.path,
        filename
      );
    }

    // Specify the event hook to attach to
    compiler.hooks.emit.tapAsync(
      "NginxPushWebpackPlugin",
      (compilation, callback) => {
        // get all assets
        const assets = keys(this.assetsStore.data?.chunks || {}).map((key) => {
          const item = this.assetsStore.data.chunks[key];
          return item[0].publicPath;
        });

        Promise.resolve()
          // write assets to nginx
          .then(() => this.writeToNginxConf(assets))
          .then((conf) => {
            // Replace the compilation result with the evaluated conf code
            compilation.assets[this.options.filename] = {
              source: () => conf,
              size: () => conf.length,
            };
          })
          .catch((err) => {
            console.error(err);
            return null;
          })
          .then(() => {
            callback();
          });
      }
    );
  }

  writeToNginxConf(assets) {
    const { filename, nginxLocation } = this.options;
    const content = [
      `# Automatically generated by NginxPushWebpackPlugin, don't change it manually
# Please include this file in your nginx web server directive
# \`\`\`
#   include ${filename};
# \`\`\``,
    ];

    if (nginxLocation) {
      content.push(`location = ${nginxLocation} {`);
    }

    assets.forEach((asset) => {
      content.push(`  http2_push ${asset};`);
    });

    if (nginxLocation) {
      content.push("}");
    }

    return content.join("\n");
  }
}

export default NginxPushPlugin;
